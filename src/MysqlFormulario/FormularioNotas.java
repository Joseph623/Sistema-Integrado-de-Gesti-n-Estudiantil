package MysqlFormulario;

import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import Vista.Form;

public class FormularioNotas extends javax.swing.JFrame {

    DefaultTableModel modelo;

    public FormularioNotas() {
        initComponents();
        setLocationRelativeTo(null);
        modelo = new DefaultTableModel();
        tablaNotas.setModel(modelo);
        modelo.addColumn("Estudiante ID");
        modelo.addColumn("Curso ID");
        modelo.addColumn("Nota");

        cargarEstudiantes();
        cargarCursos();
        mostrarDatos();
    }

    private void cargarEstudiantes() {
        try (Connection con = conexion.conectar(); PreparedStatement ps = con.prepareStatement("SELECT id, nombre FROM estudiantes"); ResultSet rs = ps.executeQuery()) {

            cbEstudiantes.removeAllItems();
            while (rs.next()) {
                String id = rs.getString("id");
                String nombre = rs.getString("nombre");
                cbEstudiantes.addItem(id + " - " + nombre);  
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar estudiantes: " + e.getMessage());
        }
    }

    private void cargarCursos() {
        try (Connection con = conexion.conectar(); PreparedStatement ps = con.prepareStatement("SELECT id, nombre FROM cursos"); ResultSet rs = ps.executeQuery()) {

            cbCursos.removeAllItems();
            while (rs.next()) {
                int id = rs.getInt("id");
                String nombre = rs.getString("nombre");
                cbCursos.addItem(id + " - " + nombre); 
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al cargar cursos: " + e.getMessage());
        }
    }

    private void mostrarDatos() {
        modelo.setColumnIdentifiers(new String[]{"Estudiante ID", "Curso ID", "Nota"});

        String sql = """
        SELECT 
            n.estudiante_id, 
            n.curso_id, 
            n.nota
        FROM 
            notas n
    """;

        try (Connection con = conexion.conectar(); PreparedStatement ps = con.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            modelo.setRowCount(0);
            while (rs.next()) {
                modelo.addRow(new Object[]{
                    rs.getString("estudiante_id"),
                    rs.getInt("curso_id"),
                    rs.getDouble("nota")
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al mostrar datos: " + e.getMessage());
        }
    }

    private void limpiarCampos() {
        txtNota.setText("");
        cbEstudiantes.setSelectedIndex(0);
        cbCursos.setSelectedIndex(0);
    }

    class ItemComboBox {

        private int id;
        private String nombre;

        public ItemComboBox(int id, String nombre) {
            this.id = id;
            this.nombre = nombre;
        }

        public int getId() {
            return id;
        }

        @Override
        public String toString() {
            return id + " - " + nombre;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbEstudiantes = new javax.swing.JComboBox<>();
        cbCursos = new javax.swing.JComboBox<>();
        txtNota = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaNotas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnEjercicio1 = new RSMaterialComponent.RSButtonMaterialIconDos();
        btnActualizar = new RSMaterialComponent.RSButtonMaterialIconDos();
        btnEliminar = new RSMaterialComponent.RSButtonMaterialIconDos();
        btnLimpiar = new RSMaterialComponent.RSButtonMaterialIconDos();
        btnRegresar = new RSMaterialComponent.RSButtonMaterialIconDos();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbEstudiantes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbEstudiantes.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                cbEstudiantesComponentRemoved(evt);
            }
        });
        cbEstudiantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEstudiantesActionPerformed(evt);
            }
        });
        getContentPane().add(cbEstudiantes, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, 180, 30));

        cbCursos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCursosActionPerformed(evt);
            }
        });
        getContentPane().add(cbCursos, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 180, 30));

        txtNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNotaActionPerformed(evt);
            }
        });
        getContentPane().add(txtNota, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 60, 170, 30));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 3));

        tablaNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Curso", "Estudiante", "Nota"
            }
        ));
        tablaNotas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaNotasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaNotas);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 620, 220));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Cursos:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Nota:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 30, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Estudiante:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, -1, -1));

        btnEjercicio1.setBackground(new java.awt.Color(102, 204, 255));
        btnEjercicio1.setText("Agregar");
        btnEjercicio1.setBackgroundHover(new java.awt.Color(225, 71, 97));
        btnEjercicio1.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        btnEjercicio1.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.MENU);
        btnEjercicio1.setInheritsPopupMenu(true);
        btnEjercicio1.setRound(25);
        btnEjercicio1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjercicio1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnEjercicio1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 130, 40));

        btnActualizar.setBackground(new java.awt.Color(102, 204, 255));
        btnActualizar.setText("Actualizar");
        btnActualizar.setBackgroundHover(new java.awt.Color(225, 71, 97));
        btnActualizar.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        btnActualizar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.MENU);
        btnActualizar.setInheritsPopupMenu(true);
        btnActualizar.setRound(25);
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnActualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 130, 40));

        btnEliminar.setBackground(new java.awt.Color(102, 204, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.setBackgroundHover(new java.awt.Color(225, 71, 97));
        btnEliminar.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        btnEliminar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.MENU);
        btnEliminar.setInheritsPopupMenu(true);
        btnEliminar.setRound(25);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 130, 40));

        btnLimpiar.setBackground(new java.awt.Color(102, 204, 255));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setBackgroundHover(new java.awt.Color(225, 71, 97));
        btnLimpiar.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        btnLimpiar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.MENU);
        btnLimpiar.setInheritsPopupMenu(true);
        btnLimpiar.setRound(25);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 130, 120, 40));

        btnRegresar.setBackground(new java.awt.Color(0, 153, 204));
        btnRegresar.setText("Regresar");
        btnRegresar.setBackgroundHover(new java.awt.Color(225, 71, 97));
        btnRegresar.setEffectButton(RSMaterialComponent.RSButtonMaterialIconDos.EFFECTBUTTON.RAISED);
        btnRegresar.setFont(new java.awt.Font("Rockwell", 1, 14)); // NOI18N
        btnRegresar.setIcons(rojeru_san.efectos.ValoresEnum.ICONS.HOME);
        btnRegresar.setRound(25);
        btnRegresar.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                btnRegresarAncestorMoved(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 410, 150, 50));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/FondoInt.png"))); // NOI18N
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 4));
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 700, 500));

        setSize(new java.awt.Dimension(716, 508));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cbEstudiantesComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_cbEstudiantesComponentRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEstudiantesComponentRemoved

    private void cbCursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCursosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCursosActionPerformed

    private void cbEstudiantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEstudiantesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEstudiantesActionPerformed

    private void txtNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNotaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNotaActionPerformed

    private void tablaNotasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaNotasMouseClicked
        int fila = tablaNotas.getSelectedRow();
        String idEstudianteTabla = tablaNotas.getValueAt(fila, 0).toString();
        String idCursoTabla = tablaNotas.getValueAt(fila, 1).toString();

// Buscar estudiante en combo
        for (int i = 0; i < cbEstudiantes.getItemCount(); i++) {
            String item = cbEstudiantes.getItemAt(i);
            String idCombo = item.split(" - ")[0];
            if (idCombo.equals(idEstudianteTabla)) {
                cbEstudiantes.setSelectedIndex(i);
                break;
            }
        }

// Buscar curso en combo
        for (int i = 0; i < cbCursos.getItemCount(); i++) {
            String item = cbCursos.getItemAt(i);
            String idCombo = item.split(" - ")[0];
            if (idCombo.equals(idCursoTabla)) {
                cbCursos.setSelectedIndex(i);
                break;
            }
        }

        txtNota.setText(String.valueOf(tablaNotas.getValueAt(fila, 2)));


    }//GEN-LAST:event_tablaNotasMouseClicked

    private void btnEjercicio1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjercicio1ActionPerformed
        String estudianteSeleccionado = cbEstudiantes.getSelectedItem().toString();
        String estudianteId = estudianteSeleccionado.split(" - ")[0];
        String cursoSeleccionado = cbCursos.getSelectedItem().toString();
        int cursoId = Integer.parseInt(cursoSeleccionado.split(" - ")[0]);  // Extrae el ID

        double nota;
        try {
            nota = Double.parseDouble(txtNota.getText());
            if (nota < 0 || nota > 20) {
                JOptionPane.showMessageDialog(null, "La nota debe estar entre 0 y 20.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Ingrese una nota válida.");
            return;
        }

        try (Connection con = conexion.conectar(); PreparedStatement ps = con.prepareStatement("INSERT INTO notas(estudiante_id, curso_id, nota) VALUES (?, ?, ?)")) {
            ps.setString(1, estudianteId);
            ps.setInt(2, cursoId);
            ps.setDouble(3, nota);
            ps.executeUpdate();
            mostrarDatos();
            limpiarCampos();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al agregar nota: " + e.getMessage());
        }
    }//GEN-LAST:event_btnEjercicio1ActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        int fila = tablaNotas.getSelectedRow();
        if (fila >= 0) {
            String estudianteSeleccionado = cbEstudiantes.getSelectedItem().toString();
            String estudianteId = estudianteSeleccionado.split(" - ")[0];
            String cursoSeleccionado = cbCursos.getSelectedItem().toString();
            int cursoId = Integer.parseInt(cursoSeleccionado.split(" - ")[0]);  // Extrae el ID

            double nota;
            try {
                nota = Double.parseDouble(txtNota.getText());
                if (nota < 0 || nota > 20) {
                    JOptionPane.showMessageDialog(null, "La nota debe estar entre 0 y 20.");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Ingrese una nota válida.");
                return;
            }

            try (Connection con = conexion.conectar(); PreparedStatement ps = con.prepareStatement("UPDATE notas SET nota=? WHERE estudiante_id=? AND curso_id=?")) {
                ps.setDouble(1, nota);
                ps.setString(2, estudianteId);
                ps.setInt(3, cursoId);
                ps.executeUpdate();
                mostrarDatos();
                limpiarCampos();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al actualizar nota: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona una fila para actualizar");
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int fila = tablaNotas.getSelectedRow();
        if (fila >= 0) {
            String estudianteId = tablaNotas.getValueAt(fila, 0).toString();
            int cursoId = (int) tablaNotas.getValueAt(fila, 1);

            try (Connection con = conexion.conectar(); PreparedStatement ps = con.prepareStatement("DELETE FROM notas WHERE estudiante_id=? AND curso_id=?")) {
                ps.setString(1, estudianteId);
                ps.setInt(2, cursoId);
                ps.executeUpdate();
                mostrarDatos();
                limpiarCampos();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al eliminar nota: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona una fila para eliminar");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnRegresarAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_btnRegresarAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRegresarAncestorMoved

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        Form fy = new Form();
        fy.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormularioNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormularioNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormularioNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormularioNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormularioNotas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSButtonMaterialIconDos btnActualizar;
    private RSMaterialComponent.RSButtonMaterialIconDos btnEjercicio1;
    private RSMaterialComponent.RSButtonMaterialIconDos btnEliminar;
    private RSMaterialComponent.RSButtonMaterialIconDos btnLimpiar;
    private RSMaterialComponent.RSButtonMaterialIconDos btnRegresar;
    private javax.swing.JComboBox<String> cbCursos;
    private javax.swing.JComboBox<String> cbEstudiantes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaNotas;
    private javax.swing.JTextField txtNota;
    // End of variables declaration//GEN-END:variables
}
